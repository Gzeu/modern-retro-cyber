name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  FORCE_COLOR: 1

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Lint code
        run: pnpm lint
        
      - name: 🏢 Build packages
        run: pnpm build
        
      - name: 🧪 Test packages
        run: pnpm test
        
      - name: 🔄 Upload coverage reports
        if: success()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  smart-contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 📝 Compile contracts
        run: pnpm --filter @modern-retro-cyber/contracts build
        
      - name: 🧪 Test contracts
        run: pnpm --filter @modern-retro-cyber/contracts test
        
      - name: 🔍 Contract security check
        run: |
          # Install Slither (optional, requires Python)
          # pip3 install slither-analyzer
          # pnpm --filter @modern-retro-cyber/contracts security-check
          echo "Security check placeholder - install Slither for full security analysis"

  build-apps:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    strategy:
      matrix:
        app: [web, admin]
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🏢 Build ${{ matrix.app }} app
        run: pnpm --filter ${{ matrix.app }} build
        
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/build
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Run npm audit
        run: pnpm audit --audit-level moderate
        
      - name: 🔍 Dependency vulnerability scan
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [build-apps]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 📈 Bundle analysis
        run: |
          pnpm --filter web analyze || echo "Bundle analysis not configured yet"
          
      - name: 📄 Comment PR with performance metrics
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '📈 **Performance Analysis Complete**\n\nBuild metrics and bundle analysis have been generated. Check the build artifacts for detailed reports.'
            })

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build-apps]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🏢 Build for preview
        run: pnpm build
        
      - name: 🚀 Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./apps/web
          scope: ${{ secrets.TEAM_ID }}
        
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [build-and-test, smart-contract-tests, security-audit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🏢 Build for production
        run: pnpm build
        
      - name: 🚀 Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./apps/web
          scope: ${{ secrets.TEAM_ID }}
          
      - name: 📢 Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '🎉 Production deployment successful! 🚀'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: 📢 Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ Production deployment failed! 😨'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
